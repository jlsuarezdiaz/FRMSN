/*
 * Author: Juan Luis Suárez Díaz
 * July, 2015
 * Music Player
 */
package GUI;

import FileUtils.FileSend;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Juan Luis
 */
public class FileView extends javax.swing.JPanel implements LoadableView{
    private String fileLoading;
    private int curr;
    private int tot;
    private String unit;
    private String action;
    File f;
    
    /**
     * Creates new form FileView
     */
    public FileView() {
        initComponents();
        f = null;
        this.downloadBt.setVisible(false);
        this.viewBt.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        downloadPb = new javax.swing.JProgressBar();
        iconLab = new javax.swing.JLabel();
        fileLab = new javax.swing.JLabel();
        downloadBt = new javax.swing.JButton();
        viewBt = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(675, 84));
        setMinimumSize(new java.awt.Dimension(675, 84));

        iconLab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/Extensions/_blank.png"))); // NOI18N

        fileLab.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        fileLab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fileLab.setText("mandelbrot.png");

        downloadBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/download_icon.png"))); // NOI18N
        downloadBt.setToolTipText("Guardar archivo.");
        downloadBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtActionPerformed(evt);
            }
        });

        viewBt.setToolTipText("Visualizar archivo.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iconLab)
                        .addGap(22, 22, 22)
                        .addComponent(fileLab, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                        .addComponent(viewBt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadBt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(downloadPb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileLab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iconLab)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(viewBt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(downloadBt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadPb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void downloadBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showSaveDialog(this);
        FileOutputStream fw = null;
        if(returnVal == JFileChooser.APPROVE_OPTION){
            try{
                byte[] data = FileSend.loadFile(f.getAbsolutePath());
                File save = new File(fc.getSelectedFile().getAbsolutePath());
                fw = new FileOutputStream(save);
                fw.write(data);
                // Sugerir liberación de memoria.
                data = null;
                System.gc();
            }
            catch(Exception ex){
                System.err.println("Error al guardar archivo: "+ex.getMessage());
                JOptionPane.showMessageDialog(this, "Error al guardar archivo: "+
                        ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            finally{
                try{
                    fw.close();
                }
                catch(Exception ex){}
            }
        }
    }//GEN-LAST:event_downloadBtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadBt;
    private javax.swing.JProgressBar downloadPb;
    private javax.swing.JLabel fileLab;
    private javax.swing.JLabel iconLab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton viewBt;
    // End of variables declaration//GEN-END:variables

    @Override
    public void hideView() {
        this.downloadPb.setVisible(false);
    }

    @Override
    public void setView(String fileLoading, int curr, int tot, String unit, String action) {
        this.fileLoading = fileLoading;
        this.curr =  curr;
        this.tot = tot;
        this.unit = unit;
        this.action = action;
        
        this.fileLab.setText(fileLoading);
        this.downloadPb.setVisible(true);
        this.downloadPb.setMaximum(tot);
        this.downloadPb.setMinimum(0);
        this.downloadPb.setValue(curr);
        this.repaint();
        this.revalidate();
    }

    @Override
    public void showView() {
        this.setVisible(true);
    }

    @Override
    public void updateView(int curr, int tot) {
        setView(fileLoading,curr,tot,unit,action);
    }
    
    public void setFile(File f){
        this.f = f;
        if(f.exists()){
            this.downloadBt.setVisible(true);
        }
        this.repaint();
        this.revalidate();
    }

    public String getFileLoading() {
        return fileLoading;
    }
    
    
}
